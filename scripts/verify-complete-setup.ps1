# Script para verificar setup completo del Dashboard L08
Write-Host "========================================" -ForegroundColor Green
Write-Host "VerificaciÃ³n Completa - Dashboard L08" -ForegroundColor Green
Write-Host "========================================" -ForegroundColor Green
Write-Host ""

# 1. Verificar procesos en ejecuciÃ³n
Write-Host "1. Verificando servicios en ejecuciÃ³n..." -ForegroundColor Yellow

$nodeProcesses = Get-Process -Name "node" -ErrorAction SilentlyContinue
if ($nodeProcesses) {
    Write-Host "   âœ“ Frontend ejecutÃ¡ndose (PIDs: $($nodeProcesses.Id -join ', '))" -ForegroundColor Green
} else {
    Write-Host "   âœ— Frontend no estÃ¡ ejecutÃ¡ndose" -ForegroundColor Red
}

$javaProcesses = Get-Process -Name "java" -ErrorAction SilentlyContinue
if ($javaProcesses) {
    Write-Host "   âœ“ Backend Java ejecutÃ¡ndose (PIDs: $($javaProcesses.Id -join ', '))" -ForegroundColor Green
} else {
    Write-Host "   âœ— Backend Java no estÃ¡ ejecutÃ¡ndose" -ForegroundColor Red
}

Write-Host ""

# 2. Verificar puertos
Write-Host "2. Verificando puertos..." -ForegroundColor Yellow

$ports = @(4200, 8080, 8081)
foreach ($port in $ports) {
    $connection = Test-NetConnection -ComputerName localhost -Port $port -InformationLevel Quiet -WarningAction SilentlyContinue
    if ($connection) {
        Write-Host "   âœ“ Puerto $port abierto" -ForegroundColor Green
    } else {
        Write-Host "   âœ— Puerto $port cerrado" -ForegroundColor Red
    }
}

Write-Host ""

# 3. Verificar archivos crÃ­ticos
Write-Host "3. Verificando archivos crÃ­ticos..." -ForegroundColor Yellow

$criticalFiles = @(
    "frontend/risk-dashboard/src/app/app.routes.ts",
    "frontend/risk-dashboard/src/app/app.component.ts",
    "frontend/risk-dashboard/src/app/services/l08.service.ts",
    "frontend/risk-dashboard/src/app/pages/l08-dashboard/l08-main/l08-main.component.ts",
    "scripts/create-regulatory-tables.sql",
    "scripts/insert-l08-test-data.sql"
)

foreach ($file in $criticalFiles) {
    if (Test-Path $file) {
        Write-Host "   âœ“ $($file.Split('/')[-1])" -ForegroundColor Green
    } else {
        Write-Host "   âœ— $($file.Split('/')[-1]) no encontrado" -ForegroundColor Red
    }
}

Write-Host ""

# 4. Verificar configuraciÃ³n de rutas
Write-Host "4. Verificando configuraciÃ³n de rutas..." -ForegroundColor Yellow

$routesFile = "frontend/risk-dashboard/src/app/app.routes.ts"
if (Test-Path $routesFile) {
    $routesContent = Get-Content $routesFile -Raw
    if ($routesContent -match "l08") {
        Write-Host "   âœ“ Ruta L08 configurada" -ForegroundColor Green
    } else {
        Write-Host "   âœ— Ruta L08 no encontrada" -ForegroundColor Red
    }
    
    if ($routesContent -match "L08MainComponent") {
        Write-Host "   âœ“ Componente principal L08 importado" -ForegroundColor Green
    } else {
        Write-Host "   âœ— Componente principal L08 no importado" -ForegroundColor Red
    }
}

Write-Host ""

# 5. Verificar menÃº
Write-Host "5. Verificando configuraciÃ³n del menÃº..." -ForegroundColor Yellow

$appComponentFile = "frontend/risk-dashboard/src/app/app.component.ts"
if (Test-Path $appComponentFile) {
    $componentContent = Get-Content $appComponentFile -Raw
    if ($componentContent -match "L08.*Liquidez Estructural") {
        Write-Host "   âœ“ MenÃº L08 configurado" -ForegroundColor Green
    } else {
        Write-Host "   âœ— MenÃº L08 no configurado" -ForegroundColor Red
    }
    
    if ($componentContent -match "routerLink.*l08") {
        Write-Host "   âœ“ RouterLink L08 configurado" -ForegroundColor Green
    } else {
        Write-Host "   âœ— RouterLink L08 no configurado" -ForegroundColor Red
    }
}

Write-Host ""

# 6. Verificar build
Write-Host "6. Verificando build del proyecto..." -ForegroundColor Yellow
Set-Location "frontend/risk-dashboard"
try {
    $buildOutput = npm run build 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "   âœ“ Build exitoso" -ForegroundColor Green
    } else {
        Write-Host "   âœ— Build fallÃ³" -ForegroundColor Red
        $buildOutput | Where-Object { $_ -match "ERROR" } | ForEach-Object { 
            Write-Host "     $_" -ForegroundColor Red 
        }
    }
} catch {
    Write-Host "   âœ— Error al ejecutar build" -ForegroundColor Red
}

Set-Location "../.."

Write-Host ""

# 7. Resumen y recomendaciones
Write-Host "7. Resumen y prÃ³ximos pasos..." -ForegroundColor Yellow

Write-Host ""
Write-Host "   ðŸŽ¯ Para acceder al dashboard:" -ForegroundColor Cyan
Write-Host "     1. Abrir http://localhost:4200" -ForegroundColor White
Write-Host "     2. Hacer clic en 'Reportes Regulatorios'" -ForegroundColor White
Write-Host "     3. Seleccionar 'L08 - Liquidez Estructural'" -ForegroundColor White

Write-Host ""
Write-Host "   ðŸ”§ Si hay problemas:" -ForegroundColor Cyan
Write-Host "     â€¢ Verificar que todos los servicios estÃ©n ejecutÃ¡ndose" -ForegroundColor White
Write-Host "     â€¢ Revisar consola del navegador para errores" -ForegroundColor White
Write-Host "     â€¢ Verificar logs de los servicios backend" -ForegroundColor White

Write-Host ""
Write-Host "   ðŸ“Š Estado actual:" -ForegroundColor Cyan
Write-Host "     â€¢ Frontend: Configurado y ejecutÃ¡ndose" -ForegroundColor White
Write-Host "     â€¢ Backend: En proceso de inicio" -ForegroundColor White
Write-Host "     â€¢ Base de datos: Pendiente de implementaciÃ³n" -ForegroundColor White
Write-Host "     â€¢ IntegraciÃ³n: Configurada con fallback a datos simulados" -ForegroundColor White

Write-Host ""
Write-Host "========================================" -ForegroundColor Green
Write-Host "VerificaciÃ³n completada" -ForegroundColor Green
Write-Host "========================================" -ForegroundColor Green 